syntax = "proto2";

enum UsbReturnCode {
	USB_SUCCESS                            = 0x00;    // USB operation successful.
	USB_INVALID_STATE                      = 0x01;    // Operation cannot be performed in current state.
	USB_BUSY                               = 0x02;    // A transaction is already in progress.
	USB_ILLEGAL_REQUEST                    = 0x03;    // Cannot perform requested operation.
	USB_INVALID_CONFIGURATION              = 0x04;    // Configuration descriptor not found.
	USB_MEMORY_ALLOCATION_ERROR            = 0x05;    // Out of dynamic memory.
	USB_UNKNOWN_DEVICE                     = 0x06;    // Device with specified address is not attached.
	USB_CANNOT_ENUMERATE                   = 0x07;    // Cannot enumerate the attached device.
	USB_EVENT_QUEUE_FULL                   = 0x08;    // Event queue was full when an event occured.
	USB_ENDPOINT_BUSY                      = 0x10;    // Endpoint is currently processing a transaction.
	USB_ENDPOINT_STALLED                   = 0x11;    // Endpoint is currently stalled. User must clear the condition.
	USB_ENDPOINT_ERROR                     = 0x12;    // Will need more than this eventually
	USB_ENDPOINT_ERROR_ILLEGAL_PID         = 0x13;    // Illegal PID received.
	USB_ENDPOINT_NOT_FOUND                 = 0x14;    // Requested endpoint does not exist on device.
	USB_ENDPOINT_ILLEGAL_DIRECTION         = 0x15;    // Reads must be performe on IN endpoints; writes on OUT endpoints.
//	USB_ENDPOINT_TRANSACTION_IN_PROGRESS   = 0x16;
	USB_ENDPOINT_NAK_TIMEOUT               = 0x17;    // Too many NAK's occurred while waiting for the current transaction.
	USB_ENDPOINT_ILLEGAL_TYPE              = 0x18;    // Transfer type must match endpoint description.
	USB_ENDPOINT_UNRESOLVED_STATE          = 0x19;    // Endpoint is in an unknown state after completing a transaction.
	USB_ENDPOINT_ERROR_BIT_STUFF           = 0x20;    // USB Module - Bit stuff error.
	USB_ENDPOINT_ERROR_DMA                 = 0x21;    // USB Module - DMA error.
	USB_ENDPOINT_ERROR_TIMEOUT             = 0x22;    // USB Module - Bus timeout.
	USB_ENDPOINT_ERROR_DATA_FIELD          = 0x23;    // USB Module - Data field size error.
	USB_ENDPOINT_ERROR_CRC16               = 0x24;    // USB Module - CRC16 failure.
	USB_ENDPOINT_ERROR_END_OF_FRAME        = 0x25;    // USB Module - End of Frame error.
	USB_ENDPOINT_ERROR_PID_CHECK           = 0x26;    // USB Module - Illegal PID received.
	USB_ENDPOINT_ERROR_BMX                 = 0x27;    // USB Module - Bus Matrix error.
	USB_ERROR_INSUFFICIENT_POWER           = 0x28;    // Too much power was requested

// Section: Return values for USBHostDeviceStatus()
//	USB_DEVICE_STATUS                      = 0x30;                        // Offset for USBHostDeviceStatus() return codes
	USB_DEVICE_ATTACHED                    = 0x30;    // Device is attached and running
	USB_DEVICE_DETACHED                    = 0x31;    // No device is attached
	USB_DEVICE_ENUMERATING                 = 0x32;    // Device is enumerating
	USB_HOLDING_OUT_OF_MEMORY              = 0x33;    // Not enough heap space available
	USB_HOLDING_UNSUPPORTED_DEVICE         = 0x34;    // Invalid configuration or unsupported class
	USB_HOLDING_UNSUPPORTED_HUB            = 0x35;    // Hubs are not supported
	USB_HOLDING_INVALID_CONFIGURATION      = 0x36;    // Invalid configuration requested
	USB_HOLDING_PROCESSING_CAPACITY        = 0x37;    // Processing requirement excessive
	USB_HOLDING_POWER_REQUIREMENT          = 0x38;    // Power requirement excessive
	USB_HOLDING_CLIENT_INIT_ERROR          = 0x39;    // Client driver failed to initialize
	USB_DEVICE_SUSPENDED                   = 0x3A;    // Device is suspended

	USB_ERROR_CLASS_DEFINED                = 0x50;    // Offset for application defined errors
	
	MESSAGE_PARSE_ERROR                    = 0x100;   // Error while prtobuf decoding / missing optional data / etc..
}

message EnpointRequest {
	required uint32 endpoint_number = 1;
}

message GetStringDescriptorRequest {
	required uint32 string_number = 1;
	required uint32 lang_idg_id = 2;
	required uint32 timeout = 3;
}

message SetConfigurationRequest {
	required uint32 configuration_number = 1;
}

message ReadRequest {
	required uint32 endpoint_number = 1;
	required uint32 length = 2;
	required uint32 timeout = 3;
}

message WriteRequest {
	required uint32 endpoint_number = 1;
	required bytes data = 2;
	required uint32 timeout = 3;
}

message IssueDeviceRequestRequest {
    required uint32 request_type = 1; //- The request type as defined by the USB specification.
    required uint32 request =2;       //- The request as defined by the USB specification.
    required uint32 value = 3;        //- The value for the request as defined by the USB specification.
    required uint32 index = 4;        //- The index for the request as defined by the USB specification.
	required uint32 timeout = 5;
    optional bytes  data = 6;         //- The data length for the request as defined by the USB specification. (only with set)
}

message GetCurrentConfigurationDescriptorResponse {
	required bytes configuration_descriptor = 1;
}

message GetDeviceDescriptorResponse {
	required bytes device_descriptor = 1;
}

message GetStringDescriptorResponse {
	required string string_descriptor = 1;
}

message ReadResponse {
	required bytes data = 1;
}

message IssueDeviceRequestGetResponse {
	required bytes data = 1;
}

enum UsbServiceMethods {
	GetDeviceStatus = 1; // param () returns ();
	ResetDevice = 2; // param () returns ();
	ResumeDevice = 3; // param () returns ();
	SuspendDevice = 4; // param () returns ();
	SetDeviceConfiguration = 5; // param (SetConfigurationRequest) returns ();
	ClearEndpointErrors = 6; // param (EnpointRequest) returns ();
	GetCurrentConfigurationDescriptor = 7; // param () returns (GetCurrentConfigurationDescriptorResponse);
	GetDeviceDescriptor = 8; // param () returns (GetDeviceDescriptorResponse);
	GetStringDescriptor = 9; // param (GetStringDescriptorRequest) returns (GetStringDescriptorResponse);
	TerminateTransfer = 10; // param (EnpointRequest) returns ();
	Read = 11; // param (ReadRequest) returns (ReadResponse);
	Write = 12; // param (WriteRequest) returns ();
	IssueDeviceRequestSet = 13; // param (IssueDeviceRequestRequest) returns ()
	IssueDeviceRequestGet = 14; // param (IssueDeviceRequestRequest) returns (IssueDeviceRequestGetResponse)
}

message UsbServiceRequest {
	required UsbServiceMethods method = 1;
	required uint32 call_id = 2;
	oneof request_message {
		SetConfigurationRequest set_configuration_reqest = 10;
		EnpointRequest endpoint_reqeust = 11;
		GetStringDescriptorRequest get_string_descriptor_request = 12;
		ReadRequest read_request = 13;
		WriteRequest write_request = 14;
		IssueDeviceRequestRequest issue_device_request_request = 15;
	}
}

message UsbServiceResponse {
	required UsbServiceMethods method = 1;
	required uint32 call_id = 2;
	required UsbReturnCode res = 3;
	oneof response_message {
		GetCurrentConfigurationDescriptorResponse get_current_configuration_descriptor_response = 10;
		GetDeviceDescriptorResponse get_device_descriptor_response = 11;
		GetStringDescriptorResponse get_string_descriptor_response = 12;
		ReadResponse read_response = 13;
		IssueDeviceRequestGetResponse issue_device_request_get_response = 14;
	}
}