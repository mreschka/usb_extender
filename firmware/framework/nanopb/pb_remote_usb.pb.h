/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.5 at Thu Jun 02 00:40:44 2016. */

#ifndef PB_PB_REMOTE_USB_PB_H_INCLUDED
#define PB_PB_REMOTE_USB_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _UsbReturnCode {
    UsbReturnCode_USB_SUCCESS = 0,
    UsbReturnCode_USB_INVALID_STATE = 1,
    UsbReturnCode_USB_BUSY = 2,
    UsbReturnCode_USB_ILLEGAL_REQUEST = 3,
    UsbReturnCode_USB_INVALID_CONFIGURATION = 4,
    UsbReturnCode_USB_MEMORY_ALLOCATION_ERROR = 5,
    UsbReturnCode_USB_UNKNOWN_DEVICE = 6,
    UsbReturnCode_USB_CANNOT_ENUMERATE = 7,
    UsbReturnCode_USB_EVENT_QUEUE_FULL = 8,
    UsbReturnCode_USB_ENDPOINT_BUSY = 16,
    UsbReturnCode_USB_ENDPOINT_STALLED = 17,
    UsbReturnCode_USB_ENDPOINT_ERROR = 18,
    UsbReturnCode_USB_ENDPOINT_ERROR_ILLEGAL_PID = 19,
    UsbReturnCode_USB_ENDPOINT_NOT_FOUND = 20,
    UsbReturnCode_USB_ENDPOINT_ILLEGAL_DIRECTION = 21,
    UsbReturnCode_USB_ENDPOINT_NAK_TIMEOUT = 23,
    UsbReturnCode_USB_ENDPOINT_ILLEGAL_TYPE = 24,
    UsbReturnCode_USB_ENDPOINT_UNRESOLVED_STATE = 25,
    UsbReturnCode_USB_ENDPOINT_ERROR_BIT_STUFF = 32,
    UsbReturnCode_USB_ENDPOINT_ERROR_DMA = 33,
    UsbReturnCode_USB_ENDPOINT_ERROR_TIMEOUT = 34,
    UsbReturnCode_USB_ENDPOINT_ERROR_DATA_FIELD = 35,
    UsbReturnCode_USB_ENDPOINT_ERROR_CRC16 = 36,
    UsbReturnCode_USB_ENDPOINT_ERROR_END_OF_FRAME = 37,
    UsbReturnCode_USB_ENDPOINT_ERROR_PID_CHECK = 38,
    UsbReturnCode_USB_ENDPOINT_ERROR_BMX = 39,
    UsbReturnCode_USB_ERROR_INSUFFICIENT_POWER = 40,
    UsbReturnCode_USB_DEVICE_ATTACHED = 48,
    UsbReturnCode_USB_DEVICE_DETACHED = 49,
    UsbReturnCode_USB_DEVICE_ENUMERATING = 50,
    UsbReturnCode_USB_HOLDING_OUT_OF_MEMORY = 51,
    UsbReturnCode_USB_HOLDING_UNSUPPORTED_DEVICE = 52,
    UsbReturnCode_USB_HOLDING_UNSUPPORTED_HUB = 53,
    UsbReturnCode_USB_HOLDING_INVALID_CONFIGURATION = 54,
    UsbReturnCode_USB_HOLDING_PROCESSING_CAPACITY = 55,
    UsbReturnCode_USB_HOLDING_POWER_REQUIREMENT = 56,
    UsbReturnCode_USB_HOLDING_CLIENT_INIT_ERROR = 57,
    UsbReturnCode_USB_DEVICE_SUSPENDED = 58,
    UsbReturnCode_USB_ERROR_CLASS_DEFINED = 80,
    UsbReturnCode_MESSAGE_PARSE_ERROR = 256
} UsbReturnCode;

typedef enum _UsbServiceMethods {
    UsbServiceMethods_GetDeviceStatus = 1,
    UsbServiceMethods_ResetDevice = 2,
    UsbServiceMethods_ResumeDevice = 3,
    UsbServiceMethods_SuspendDevice = 4,
    UsbServiceMethods_SetDeviceConfiguration = 5,
    UsbServiceMethods_ClearEndpointErrors = 6,
    UsbServiceMethods_GetCurrentConfigurationDescriptor = 7,
    UsbServiceMethods_GetDeviceDescriptor = 8,
    UsbServiceMethods_GetStringDescriptor = 9,
    UsbServiceMethods_TerminateTransfer = 10,
    UsbServiceMethods_Read = 11,
    UsbServiceMethods_Write = 12,
    UsbServiceMethods_IssueDeviceRequestSet = 13,
    UsbServiceMethods_IssueDeviceRequestGet = 14
} UsbServiceMethods;

/* Struct definitions */
typedef struct _GetCurrentConfigurationDescriptorResponse {
    pb_callback_t configuration_descriptor;
/* @@protoc_insertion_point(struct:GetCurrentConfigurationDescriptorResponse) */
} GetCurrentConfigurationDescriptorResponse;

typedef struct _GetDeviceDescriptorResponse {
    pb_callback_t device_descriptor;
/* @@protoc_insertion_point(struct:GetDeviceDescriptorResponse) */
} GetDeviceDescriptorResponse;

typedef struct _GetStringDescriptorResponse {
    pb_callback_t string_descriptor;
/* @@protoc_insertion_point(struct:GetStringDescriptorResponse) */
} GetStringDescriptorResponse;

typedef struct _IssueDeviceRequestGetResponse {
    pb_callback_t data;
/* @@protoc_insertion_point(struct:IssueDeviceRequestGetResponse) */
} IssueDeviceRequestGetResponse;

typedef struct _EnpointRequest {
    uint8_t endpoint_number;
/* @@protoc_insertion_point(struct:EnpointRequest) */
} EnpointRequest;

typedef struct _GetStringDescriptorRequest {
    uint8_t string_number;
    uint8_t lang_idg_id;
    uint16_t timeout;
/* @@protoc_insertion_point(struct:GetStringDescriptorRequest) */
} GetStringDescriptorRequest;

typedef struct _IssueDeviceRequestRequest {
    uint8_t request_type;
    uint8_t request;
    uint16_t value;
    uint16_t index;
    uint16_t timeout;
    pb_callback_t data;
/* @@protoc_insertion_point(struct:IssueDeviceRequestRequest) */
} IssueDeviceRequestRequest;

typedef struct _ReadRequest {
    uint8_t endpoint_number;
    uint8_t length;
    uint16_t timeout;
/* @@protoc_insertion_point(struct:ReadRequest) */
} ReadRequest;

typedef PB_BYTES_ARRAY_T(64) ReadResponse_data_t;
typedef struct _ReadResponse {
    ReadResponse_data_t data;
/* @@protoc_insertion_point(struct:ReadResponse) */
} ReadResponse;

typedef struct _SetConfigurationRequest {
    uint8_t configuration_number;
/* @@protoc_insertion_point(struct:SetConfigurationRequest) */
} SetConfigurationRequest;

typedef PB_BYTES_ARRAY_T(64) WriteRequest_data_t;
typedef struct _WriteRequest {
    uint8_t endpoint_number;
    WriteRequest_data_t data;
    uint8_t timeout;
/* @@protoc_insertion_point(struct:WriteRequest) */
} WriteRequest;

typedef struct _UsbServiceRequest {
    UsbServiceMethods method;
    uint32_t call_id;
    pb_size_t which_request_message;
    union {
        SetConfigurationRequest set_configuration_reqest;
        EnpointRequest endpoint_reqeust;
        GetStringDescriptorRequest get_string_descriptor_request;
        ReadRequest read_request;
        WriteRequest write_request;
        IssueDeviceRequestRequest issue_device_request_request;
    } request_message;
/* @@protoc_insertion_point(struct:UsbServiceRequest) */
} UsbServiceRequest;

typedef struct _UsbServiceResponse {
    UsbServiceMethods method;
    uint32_t call_id;
    UsbReturnCode res;
    pb_size_t which_response_message;
    union {
        GetCurrentConfigurationDescriptorResponse get_current_configuration_descriptor_response;
        GetDeviceDescriptorResponse get_device_descriptor_response;
        GetStringDescriptorResponse get_string_descriptor_response;
        ReadResponse read_response;
        IssueDeviceRequestGetResponse issue_device_request_get_response;
    } response_message;
/* @@protoc_insertion_point(struct:UsbServiceResponse) */
} UsbServiceResponse;

/* Default values for struct fields */

/* Initializer values for message structs */
#define EnpointRequest_init_default              {0}
#define GetStringDescriptorRequest_init_default  {0, 0, 0}
#define SetConfigurationRequest_init_default     {0}
#define ReadRequest_init_default                 {0, 0, 0}
#define WriteRequest_init_default                {0, {0, {0}}, 0}
#define IssueDeviceRequestRequest_init_default   {0, 0, 0, 0, 0, {{NULL}, NULL}}
#define GetCurrentConfigurationDescriptorResponse_init_default {{{NULL}, NULL}}
#define GetDeviceDescriptorResponse_init_default {{{NULL}, NULL}}
#define GetStringDescriptorResponse_init_default {{{NULL}, NULL}}
#define ReadResponse_init_default                {{0, {0}}}
#define IssueDeviceRequestGetResponse_init_default {{{NULL}, NULL}}
#define UsbServiceRequest_init_default           {(UsbServiceMethods)0, 0, 0, {SetConfigurationRequest_init_default}}
#define UsbServiceResponse_init_default          {(UsbServiceMethods)0, 0, (UsbReturnCode)0, 0, {GetCurrentConfigurationDescriptorResponse_init_default}}
#define EnpointRequest_init_zero                 {0}
#define GetStringDescriptorRequest_init_zero     {0, 0, 0}
#define SetConfigurationRequest_init_zero        {0}
#define ReadRequest_init_zero                    {0, 0, 0}
#define WriteRequest_init_zero                   {0, {0, {0}}, 0}
#define IssueDeviceRequestRequest_init_zero      {0, 0, 0, 0, 0, {{NULL}, NULL}}
#define GetCurrentConfigurationDescriptorResponse_init_zero {{{NULL}, NULL}}
#define GetDeviceDescriptorResponse_init_zero    {{{NULL}, NULL}}
#define GetStringDescriptorResponse_init_zero    {{{NULL}, NULL}}
#define ReadResponse_init_zero                   {{0, {0}}}
#define IssueDeviceRequestGetResponse_init_zero  {{{NULL}, NULL}}
#define UsbServiceRequest_init_zero              {(UsbServiceMethods)0, 0, 0, {SetConfigurationRequest_init_zero}}
#define UsbServiceResponse_init_zero             {(UsbServiceMethods)0, 0, (UsbReturnCode)0, 0, {GetCurrentConfigurationDescriptorResponse_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define GetCurrentConfigurationDescriptorResponse_configuration_descriptor_tag 1
#define GetDeviceDescriptorResponse_device_descriptor_tag 1
#define GetStringDescriptorResponse_string_descriptor_tag 1
#define IssueDeviceRequestGetResponse_data_tag   1
#define EnpointRequest_endpoint_number_tag       1
#define GetStringDescriptorRequest_string_number_tag 1
#define GetStringDescriptorRequest_lang_idg_id_tag 2
#define GetStringDescriptorRequest_timeout_tag   3
#define IssueDeviceRequestRequest_request_type_tag 1
#define IssueDeviceRequestRequest_request_tag    2
#define IssueDeviceRequestRequest_value_tag      3
#define IssueDeviceRequestRequest_index_tag      4
#define IssueDeviceRequestRequest_timeout_tag    5
#define IssueDeviceRequestRequest_data_tag       6
#define ReadRequest_endpoint_number_tag          1
#define ReadRequest_length_tag                   2
#define ReadRequest_timeout_tag                  3
#define ReadResponse_data_tag                    1
#define SetConfigurationRequest_configuration_number_tag 1
#define WriteRequest_endpoint_number_tag         1
#define WriteRequest_data_tag                    2
#define WriteRequest_timeout_tag                 3
#define UsbServiceRequest_set_configuration_reqest_tag 10
#define UsbServiceRequest_endpoint_reqeust_tag   11
#define UsbServiceRequest_get_string_descriptor_request_tag 12
#define UsbServiceRequest_read_request_tag       13
#define UsbServiceRequest_write_request_tag      14
#define UsbServiceRequest_issue_device_request_request_tag 15
#define UsbServiceRequest_method_tag             1
#define UsbServiceRequest_call_id_tag            2
#define UsbServiceResponse_get_current_configuration_descriptor_response_tag 10
#define UsbServiceResponse_get_device_descriptor_response_tag 11
#define UsbServiceResponse_get_string_descriptor_response_tag 12
#define UsbServiceResponse_read_response_tag     13
#define UsbServiceResponse_issue_device_request_get_response_tag 14
#define UsbServiceResponse_method_tag            1
#define UsbServiceResponse_call_id_tag           2
#define UsbServiceResponse_res_tag               3

/* Struct field encoding specification for nanopb */
extern const pb_field_t EnpointRequest_fields[2];
extern const pb_field_t GetStringDescriptorRequest_fields[4];
extern const pb_field_t SetConfigurationRequest_fields[2];
extern const pb_field_t ReadRequest_fields[4];
extern const pb_field_t WriteRequest_fields[4];
extern const pb_field_t IssueDeviceRequestRequest_fields[7];
extern const pb_field_t GetCurrentConfigurationDescriptorResponse_fields[2];
extern const pb_field_t GetDeviceDescriptorResponse_fields[2];
extern const pb_field_t GetStringDescriptorResponse_fields[2];
extern const pb_field_t ReadResponse_fields[2];
extern const pb_field_t IssueDeviceRequestGetResponse_fields[2];
extern const pb_field_t UsbServiceRequest_fields[9];
extern const pb_field_t UsbServiceResponse_fields[9];

/* Maximum encoded size of messages (where known) */
#define EnpointRequest_size                      6
#define GetStringDescriptorRequest_size          18
#define SetConfigurationRequest_size             6
#define ReadRequest_size                         18
#define WriteRequest_size                        78
#define ReadResponse_size                        66

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define PB_REMOTE_USB_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
